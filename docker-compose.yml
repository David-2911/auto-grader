version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: autograder-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/src/config/comprehensive_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./deployment/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
    networks:
      - autograder-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: autograder-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - autograder-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: autograder-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      DB_HOST: mysql
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "5000:5000"
    volumes:
      - backend_storage:/app/storage
      - backend_logs:/app/logs
      - ./deployment/ssl:/app/ssl:ro
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autograder-network
    healthcheck:
      test: ["CMD", "node", "src/utils/healthcheck.js"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: autograder-frontend
    restart: unless-stopped
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/ssl:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - autograder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      timeout: 10s
      retries: 3
      interval: 30s

  # ML Service (Jupyter and Python processing)
  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: autograder-ml
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      ML_MODEL_PATH: /app/models
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
    ports:
      - "8888:8888"  # Jupyter
      - "5001:5001"  # ML API
    volumes:
      - ml_models:/app/models
      - ml_notebooks:/app/notebooks
      - backend_storage:/app/storage:ro
    networks:
      - autograder-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5001/health')"]
      timeout: 15s
      retries: 3
      interval: 30s
      start_period: 60s

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: autograder-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - autograder-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: autograder-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - autograder-network

  # File Processing Service
  file-processor:
    build:
      context: .
      dockerfile: Dockerfile.fileprocessor
    container_name: autograder-fileprocessor
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - backend_storage:/app/storage
      - file_processing_temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - autograder-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  ml_models:
    driver: local
  ml_notebooks:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  file_processing_temp:
    driver: local

networks:
  autograder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
