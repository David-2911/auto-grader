# Multi-stage build for Auto-Grader Backend
# Stage 1: Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY backend/package*.json ./
COPY backend/ml/requirements.txt ./ml/

# Install Node.js dependencies
RUN npm ci --only=production

# Install Python and ML dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    py3-setuptools \
    py3-wheel \
    build-base \
    python3-dev \
    linux-headers \
    libffi-dev \
    openssl-dev \
    rust \
    cargo \
    tesseract-ocr \
    tesseract-ocr-data-eng \
    poppler-utils \
    jpeg-dev \
    zlib-dev

# Create Python virtual environment
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Upgrade pip and install Python dependencies
RUN pip install --upgrade pip setuptools wheel
RUN pip install -r ml/requirements.txt

# Stage 2: Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    python3 \
    tesseract-ocr \
    tesseract-ocr-data-eng \
    poppler-utils \
    jpeg \
    zlib \
    su-exec \
    tini

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs

# Copy application files
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/venv ./venv
COPY backend/ ./

# Set up environment
ENV PATH="/app/venv/bin:$PATH"
ENV NODE_ENV=production

# Create necessary directories with proper permissions
RUN mkdir -p storage logs && \
    mkdir -p storage/{gradebook_exports,nbgrader_assignments,nbgrader_feedback,nbgrader_submissions,processed_files,question_pdfs,submission_documents,submission_images,submission_pdfs,temp_uploads} && \
    chown -R backend:nodejs storage logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node src/utils/healthcheck.js || exit 1

# Switch to non-root user
USER backend

# Expose port
EXPOSE 5000

# Use tini as init
ENTRYPOINT ["/sbin/tini", "--"]

# Start application
CMD ["node", "server.js"]
