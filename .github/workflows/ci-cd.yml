name: Auto-Grader CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # Static Analysis and Security Scanning
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint (Backend)
        run: |
          cd backend
          npm run lint

      - name: Run ESLint (Frontend)
        run: |
          cd frontend
          npm run lint

      - name: Run Prettier check
        run: |
          cd backend && npm run format:check
          cd ../frontend && npm run format:check

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          cd backend/ml
          pip install -r requirements.txt
          pip install flake8 black bandit safety

      - name: Run Python linting
        run: |
          cd backend/ml
          flake8 utils/ --max-line-length=88
          black --check utils/

      - name: Run Python security scan
        run: |
          cd backend/ml
          bandit -r utils/
          safety check

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit and Integration Tests
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: auto_grade_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -u root -ptestpass auto_grade_test < backend/src/config/comprehensive_schema.sql

      - name: Run unit tests
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: testpass
          DB_NAME: auto_grade_test
          REDIS_HOST: 127.0.0.1
          JWT_SECRET: test-jwt-secret
        run: |
          cd backend
          npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend

  # ML Model Tests
  test-ml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-eng poppler-utils

      - name: Install Python dependencies
        run: |
          cd backend/ml
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run ML tests
        run: |
          cd backend/ml
          pytest tests/ --cov=utils --cov-report=xml

      - name: Upload ML coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/ml/coverage.xml
          flags: ml

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high

  # Build Docker Images
  build:
    needs: [code-quality, test-backend, test-frontend, test-ml, security-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend, ml, fileprocessor]
    
    outputs:
      backend-tag: ${{ steps.meta.outputs.tags }}
      frontend-tag: ${{ steps.meta.outputs.tags }}
      ml-tag: ${{ steps.meta.outputs.tags }}
      fileprocessor-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # End-to-End Tests
  e2e-tests:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Start test environment
        run: |
          cp deployment/env/.env.staging.template .env
          sed -i 's/staging_/test_/g' .env
          docker-compose -f docker-compose.dev.yml up -d

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:5001/api/health; do sleep 5; done'

      - name: Install Playwright
        run: |
          cd e2e
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd e2e
          npm test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report
          path: e2e/test-results/

      - name: Cleanup test environment
        if: always()
        run: docker-compose -f docker-compose.dev.yml down -v

  # Staging Deployment
  deploy-staging:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    needs: [build, e2e-tests]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here
          aws ecs update-service --cluster autograder-staging --service autograder-staging-backend --force-new-deployment
          aws ecs update-service --cluster autograder-staging --service autograder-staging-frontend --force-new-deployment

      - name: Run smoke tests
        run: |
          timeout 300 bash -c 'until curl -f ${{ vars.STAGING_URL }}/health; do sleep 10; done'
          timeout 300 bash -c 'until curl -f ${{ vars.STAGING_URL }}/api/health; do sleep 10; done'

  # Production Deployment
  deploy-production:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build, e2e-tests]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to production (Blue-Green)
        run: |
          echo "Deploying to production environment with blue-green strategy..."
          # Implement blue-green deployment logic
          ./deployment/scripts/blue-green-deploy.sh production

      - name: Run production smoke tests
        run: |
          timeout 300 bash -c 'until curl -f ${{ vars.PRODUCTION_URL }}/health; do sleep 10; done'
          timeout 300 bash -c 'until curl -f ${{ vars.PRODUCTION_URL }}/api/health; do sleep 10; done'

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
