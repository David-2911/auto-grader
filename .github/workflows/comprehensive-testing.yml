name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Security and Code Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, python

  # Backend Testing Pipeline
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Testing Suite
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: autograde_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/ml/requirements.txt

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          npm ci
          pip install -r ml/requirements.txt

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ptest_password --silent; do
            sleep 1
          done

      - name: Setup test database
        working-directory: ./backend
        run: |
          npm run db:test:setup
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_test

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:unit
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_test

      - name: Run backend integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_test

      - name: Run ML service tests
        working-directory: ./backend
        run: npm run test:ml

      - name: Run security tests
        working-directory: ./backend
        run: npm run test:security

      - name: Generate backend coverage report
        working-directory: ./backend
        run: npm run test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Testing Pipeline
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Testing Suite
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm run test:unit

      - name: Run component tests
        working-directory: ./frontend
        run: npm run test:components

      - name: Run accessibility tests
        working-directory: ./frontend
        run: npm run test:accessibility

      - name: Generate frontend coverage report
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build frontend for E2E tests
        working-directory: ./frontend
        run: npm run build

      - name: Store frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # End-to-End Testing Pipeline
  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Testing
    needs: [backend-tests, frontend-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: autograde_e2e
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Install E2E dependencies
        working-directory: ./e2e
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./e2e
        run: npx playwright install --with-deps

      - name: Setup E2E database
        working-directory: ./backend
        run: |
          npm ci
          npm run db:e2e:setup
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_e2e

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3001
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_e2e

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run preview -- --port 3000 &
          sleep 5

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:3001/api/health --timeout 60000

      - name: Run E2E tests
        working-directory: ./e2e
        run: npm run test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: e2e/test-results/

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: e2e/test-results/

  # Performance Testing Pipeline
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Testing
    needs: [backend-tests]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: autograde_perf
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install performance test dependencies
        working-directory: ./performance
        run: npm ci

      - name: Setup performance database
        working-directory: ./backend
        run: |
          npm ci
          npm run db:perf:setup
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_perf

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: production
          PORT: 3001
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: autograde_perf

      - name: Run authentication load tests
        working-directory: ./performance
        run: npm run test:auth-load

      - name: Run submission load tests
        working-directory: ./performance
        run: npm run test:submission-load

      - name: Run grading load tests
        working-directory: ./performance
        run: npm run test:grading-load

      - name: Generate performance report
        working-directory: ./performance
        run: npm run report

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance/reports/

  # Accessibility Testing Pipeline
  accessibility-tests:
    runs-on: ubuntu-latest
    name: Accessibility Testing
    needs: [frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Install accessibility test dependencies
        run: |
          npm install -g @axe-core/cli
          npm install -g pa11y-ci

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run preview -- --port 3000 &
          sleep 5

      - name: Wait for frontend
        run: npx wait-on http://localhost:3000 --timeout 30000

      - name: Run axe accessibility tests
        run: |
          axe http://localhost:3000 \
            --tags wcag2a,wcag2aa,section508 \
            --reporter json \
            --output accessibility-axe-results.json

      - name: Run pa11y accessibility tests
        run: |
          pa11y-ci \
            --sitemap http://localhost:3000/sitemap.xml \
            --reporter json \
            > accessibility-pa11y-results.json

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: |
            accessibility-axe-results.json
            accessibility-pa11y-results.json

  # Code Quality and Coverage
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run ESLint (Backend)
        working-directory: ./backend
        run: npm run lint

      - name: Run ESLint (Frontend)
        working-directory: ./frontend
        run: npm run lint

      - name: Run Prettier check
        run: |
          cd backend && npm run format:check
          cd ../frontend && npm run format:check

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deployment Readiness Check
  deployment-check:
    runs-on: ubuntu-latest
    name: Deployment Readiness
    needs: [e2e-tests, performance-tests, accessibility-tests, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Run deployment tests
        run: |
          echo "Running deployment readiness checks..."
          # Add specific deployment validation tests here

      - name: Generate deployment report
        run: |
          echo "Generating deployment readiness report..."
          # Generate comprehensive deployment report

  # Notification and Reporting
  notify-results:
    runs-on: ubuntu-latest
    name: Test Results Notification
    needs: [security-scan, backend-tests, frontend-tests, e2e-tests, performance-tests, accessibility-tests, code-quality]
    if: always()
    
    steps:
      - name: Calculate overall status
        id: status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.backend-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.performance-tests.result }}" == "failure" ]] || \
               [[ "${{ needs.accessibility-tests.result }}" == "failure" ]]; then
            echo "status=warning" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#auto-grader-ci'
          text: |
            Testing Pipeline Results:
            - Security: ${{ needs.security-scan.result }}
            - Backend: ${{ needs.backend-tests.result }}
            - Frontend: ${{ needs.frontend-tests.result }}
            - E2E: ${{ needs.e2e-tests.result }}
            - Performance: ${{ needs.performance-tests.result }}
            - Accessibility: ${{ needs.accessibility-tests.result }}
            - Code Quality: ${{ needs.code-quality.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release
        if: github.ref == 'refs/heads/main' && needs.deployment-check.result == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Auto-Grader Release v${{ github.run_number }}
          body: |
            Automated release created after successful testing pipeline.
            
            Test Results:
            - ✅ Security scanning passed
            - ✅ Backend tests passed (85%+ coverage)
            - ✅ Frontend tests passed (85%+ coverage)
            - ✅ E2E tests passed (100% critical paths)
            - ✅ Performance tests passed
            - ✅ Accessibility tests passed (WCAG 2.1 AA)
            - ✅ Code quality checks passed
          draft: false
          prerelease: false
